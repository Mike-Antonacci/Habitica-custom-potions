// This code is licensed under the same terms as Habitica:
    // https://raw.githubusercontent.com/HabitRPG/habitrpg/develop/LICENSE
    
    //STILL TO DO
      // build up from simpler to most complex, adding features one at a time.
        // setup of potions (one or both) works (other than image), and webhook gets created
      // test out how the image looks for the custom reward (placing, etc.) and also the size of the potion title. Image not displaying.
      // test level lock, XP per day limit, notifications

/* ========================================== */
/* [Users] Required script data to fill in    */
/* ========================================== */
const USER_ID = "PasteYourUserIdHere";
const API_TOKEN = "PasteYourApiTokenHere"; // Do not share this to anyone
const WEB_APP_URL = "PasteGeneratedWebAppUrlHere";

/* ========================================== */
/* [Users] Required customizations to fill in */
/* ========================================== */

/* ========================================== */
/* [Users] Optional customizations to fill in */
/* ========================================== */

// Do you want to get private message notifications? (examples include if you're already at max Mana or exceeded the limit for daily potion usage) 
// If you don't want them, change the 1 to a 0 in the line below
const NOTIFICATIONS_ON = 1; 

/* ========================================== */
/* [Users] Do not edit code below this line   */
/* ========================================== */
const AUTHOR_ID = "0034eb14-b4d8-494e-8386-d3f33cff7922";
const SCRIPT_NAME = "Custom Potions";
const HEADERS = {
  "x-client" : AUTHOR_ID + "-" + SCRIPT_NAME,
  "x-api-user" : USER_ID,
  "x-api-key" : API_TOKEN,
}

const MESSAGE_TEST = "This is a test."; // delete later

const XP_POTION_TEXT = "**Experience Potion** [Yellow potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/experience%20potion%20transparent%20wide%20432.png)";
const XP_POTION_ALIAS = "XPpotion";
const XP_POTION_NOTES = "Gain 150 Experience (Instant Use). Maximum per day: no more than 1/3 of what's needed to level up.";
const XP_POTION_VALUE = "25";
const XP_POTION_LEVEL_LOCK = 21;
const MSG_XP_POTION_LEVEL_LOCK_FAIL = "You must be at least level 21 to use this potion.";
const MSG_XP_POTION_DAILY_USAGE_EXCEEDED = "You've already gained your maximum allowable XP from potions today.";

const MP_POTION_TEXT = "**Mana Potion** [Blue potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/mana%20potion%20transparent%20wide%20432.png)";
const MP_POTION_ALIAS = "MPpotion";
const MP_POTION_NOTES = "Recover 30 Mana (Instant Use). Maximum 4 per day."
const MP_POTION_VALUE = "25";
const MP_POTION_LEVEL_LOCK = 16;
const MSG_MP_POTION_LEVEL_LOCK_FAIL = "You must be at least level 16 to use this potion.";
const MAX_DAILY_MP_POTION_USAGE = 4;
const MSG_MP_POTION_DAILY_USAGE_EXCEEDED = "You can only use this potion four times each day.";

const XP_POTION_BUTTON = {
    "text": XP_POTION_TEXT,
    "type": "reward",
    "alias": XP_POTION_ALIAS,
    "notes": XP_POTION_NOTES,
    "value": XP_POTION_VALUE,
}

const MP_POTION_BUTTON = {
    "text": MP_POTION_TEXT,
    "type": "reward",
    "alias": MP_POTION_ALIAS,
    "notes": MP_POTION_NOTES,
    "value": MP_POTION_VALUE,
}

// deleted cronCount and daily usage things. May have to add back in later

// One-time, set up both potions. Single-potion setups are also available.
function doBothPotionSetup() {
  api_createNewTaskForUser([MP_POTION_BUTTON, XP_POTION_BUTTON]);
  
  // Next, create the webhook
  var options = {
    "scored" : true,
  }
  var payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload); 
}

// One-time, set up Experience Potion. It's separate in case someone only wants one potion.
function doExperienceSetup() {
  // First, create the potion as a custom reward
  api_createNewTaskForUser(XP_POTION_BUTTON);
  
  // Next, create the webhook
  var options = {
    "scored" : true,
  }
  var payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload); 
}

// One-time, set up Mana Potion. It's separate in case someone only wants one potion.
function doManaSetup() {
  // First, create the potion as a custom reward
  api_createNewTaskForUser(MP_POTION_BUTTON);
  
  // Next, create the webhook
  var options = {
    "scored" : true,
  }
  var payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload); 
}

// do things when the webhook runs
function doPost(e) {
  var dataContents = JSON.parse(e.postData.contents);
  var type = dataContents.type;
  var task = dataContents.task;
  
  // Check if a task was scored
  if (type == "scored"){
    api_sendPrivateMessage({"message" : MESSAGE_TEST, "toUserId" : USER_ID});
  }
  return HtmlService.createHtmlOutput();
}

// Create custom reward buttons
function api_createNewTaskForUser(payload) {
  var params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload), // Rightmost button goes on top
    "muteHttpExceptions" : true,
  }

  var url = "https://habitica.com/api/v3/tasks/user";
  return UrlFetchApp.fetch(url, params);
}

// Create a webhook if no duplicate exists
function apiMult_createNewWebhookNoDuplicates(payload) {
  var response = api_getWebhooks();
  var webhooks = JSON.parse(response).data;
  var duplicateExists = 0;
    
  for (var i in webhooks) {
    if (webhooks[i].label == payload.label) {
      duplicateExists = 1;
    }
  }
  // If webhook to be created doesn't exist yet
  if (!duplicateExists) {
    api_createNewWebhook(payload);
  }
}

// Used to see existing webhooks, and therefore if there's a duplicate
function api_getWebhooks() {
  var params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Creates a webhook (as part of the "don't make it if there's a duplicate" function)
function api_createNewWebhook(payload) {
  var params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
   
  var url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

function api_sendPrivateMessage(payload) {
  var params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/members/send-private-message";
  UrlFetchApp.fetch(url, params);
}
