// This code is licensed under the same terms as Habitica:
    // https://raw.githubusercontent.com/HabitRPG/habitrpg/develop/LICENSE

/* ========================================== */
/* [Users] Required script data to fill in    */
/* ========================================== */
const USER_ID = "PasteYourUserIdHere";
const API_TOKEN = "PasteYourApiTokenHere"; // Do not share this to anyone
const WEB_APP_URL = "PasteGeneratedWebAppUrlHere";

/* ========================================== */
/* [Users] Required customizations to fill in */
/* ========================================== */

/* ========================================== */
/* [Users] Optional customizations to fill in */
/* ========================================== */
consts NOTIFICATIONS_ON = 1;

/* ========================================== */
/* [Users] Do not edit code below this line   */
/* ========================================== */
const AUTHOR_ID = "0034eb14-b4d8-494e-8386-d3f33cff7922";
const SCRIPT_NAME = "Custom Potions";
const HEADERS = {
  "x-client" : AUTHOR_ID + "-" + SCRIPT_NAME,
  "x-api-user" : USER_ID,
  "x-api-key" : API_TOKEN,
}

//One-time, set up Experience Potion. It's separate in case someone only wants one potion.
function doExperienceSetup() {
   https://habitica.com/api/v3/tasks/user
  {
    "text": "**Experience Potion** ![Yellow potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/experience%20potion%20transparent%20wide%20432.png)",
    "type": "reward",
    "notes": "Gain 150 Experience (Instant Use)",
    "value": "25"
  }
}

//One-time, set up Mana Potion. It's separate in case someone only wants one potion.
function doManaSetup() {
  https://habitica.com/api/v3/tasks/user
  {
    "text": "**Mana Potion** ![Blue potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/mana%20potion%20transparent%20wide%20432.png)",
    "type": "reward",
    "notes": "Recover 30 Mana (Instant Use)",
    "value": "25"
  }
}




// put at the bottom. I'll likely use api_getUserInfo("stats") a lot

//Gets user info so I can use it, especially stats like mana, experience, and level
function api_getUserInfo(userFields) {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/user";
  if (userFields != "") {
    url += "?userFields=" + userFields;
  }

  const response = UrlFetchApp.fetch(url, params);
  user = JSON.parse(response).data;
  return response;
}

// Changing stats
function api_changeStats(hp, mp, exp, gp) {
  const payload = {
    "stats.hp" : hp,
    "stats.mp" : mp,
    "stats.exp" : exp,
    "stats.gp" : gp,
  }
  
  const params = {
    "method" : "put",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user";
  return UrlFetchApp.fetch(url, params);
}

// GET SOMETHING THAT SENDS A PM AS A NOTIFICATION, AND CHECKS THE OPTIONAL CUSTOMIZATION IF DISABLED




//STILL TO DO
  test out how the image looks for the custom reward (placing, etc.) and also the size of the potion title

/* ANYTHING BELOW THIS LINE IS PSUEDOCODE, NOT ACTUAL CODE. I'M TRYING TO GET A FEEL FOR HOW I'D DO THIS */
click reward = score task = trigger script to adjust stats (MP or XP)
  https://habitica.com/apidoc/#api-Webhook-AddWebhook
  
// Experience Potion use
function runXp() {
  const response = api_getUserInfo("stats");
  var lvl = user.stats.lvl;
  var hp = user.stats.hp;
  var mp = user.stats.mp;
  var exp = user.stats.exp;
  var gp = user.stats.gp;
  
  // Check for level lock
  switch (LevelLockXp){
    // If it fails, send failure message and refund the money
    case lvl < 16:
      // SEND FAILURE MESSAGE
      // REFUND 25 GP
      break;
    // If it passes, run the potion like normal
    case lvl <= 16:
      api_changeStats(hp, mp, exp + 150, gp);
      break;
  }
}

// Mana Potion use
// BASICALLY THE SAME AS ABOVE (WAIT UNTIL IT'S DONE BEFORE I TRY MORE BELOW) but also the following additions:
  var int = user.stats.int;
  var maxMp = //formula based on int;
  var mpDiff = maxMp - mp;
  
  //and more additions (nested case)
    // if level lock passes, cehck to see if near maximum Mana
      switch (nearMaxMp){
        // Adding +30 Mana won't put them at or beyond maximum
        case mpDiff <= 30:
          //run potion like normal
          break;
        // Already at maximum Mana, so cause potion to fail
        case mpDiff = 0:
          //send failure message (at max MP already)
          //refund 25 gp
          break;
        // Close to maximum Mana, so refill to max but not beyond
        case mpDiff > 30:
          //send message that it fill MP up to max but not beyond
          //run potion almost like normal except instead of mp = mp+30, do mp = mp+mpDiff
          break;
      }


Limit 4 per day (Mana) and 8 per day (XP)

some Constants I like from https://raw.githubusercontent.com/elrgarcia/Habitica-Warrior-Subclasses/master/Code.txt
  max total HP paid fail
  Max usage failed
  noHP fail
  no MP fail

other things I like:
  around 1/4 of the way down, function API get user info
  create webhook and get webhook, though I don't fully understand how those work
