// This code is licensed under the same terms as Habitica:
    // https://raw.githubusercontent.com/HabitRPG/habitrpg/develop/LICENSE
    
    //STILL TO DO
      // test out how the image looks for the custom reward (placing, etc.) and also the size of the potion title
      // test level lock, XP per day limit, notifications
      // test setup (will it make a duplicate webhook?)

/* ========================================== */
/* [Users] Required script data to fill in    */
/* ========================================== */
const USER_ID = "PasteYourUserIdHere";
const API_TOKEN = "PasteYourApiTokenHere"; // Do not share this to anyone
const WEB_APP_URL = "PasteGeneratedWebAppUrlHere";

/* ========================================== */
/* [Users] Required customizations to fill in */
/* ========================================== */

/* ========================================== */
/* [Users] Optional customizations to fill in */
/* ========================================== */

// Do you want to get private message notifications? (examples include if you're already at max Mana or exceeded the limit for daily potion usage) 
// If you don't want them, change the 1 to a 0 in the line below
const NOTIFICATIONS_ON = 1; 

/* ========================================== */
/* [Users] Do not edit code below this line   */
/* ========================================== */
const AUTHOR_ID = "0034eb14-b4d8-494e-8386-d3f33cff7922";
const SCRIPT_NAME = "Custom Potions";
const HEADERS = {
  "x-client" : AUTHOR_ID + "-" + SCRIPT_NAME,
  "x-api-user" : USER_ID,
  "x-api-key" : API_TOKEN,
}

const XP_POTION_TEXT = "**Experience Potion** [Yellow potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/experience%20potion%20transparent%20wide%20432.png)";
const XP_POTION_ALIAS = "XPpotion";
const XP_POTION_LEVEL_LOCK = 21;
const MSG_XP_POTION_LEVEL_LOCK_FAIL = "You must be at least level 21 to use this potion.";
const MSG_XP_POTION_DAILY_USAGE_EXCEEDED = "You've already gained your maximum allowable XP from potions today.";

const MP_POTION_TEXT = "**Mana Potion** [Blue potion](https://github.com/Mike-Antonacci/Habitica-custom-potions/blob/master/mana%20potion%20transparent%20wide%20432.png)";
const MP_POTION_ALIAS = "MPpotion";
const MP_POTION_LEVEL_LOCK = 16;
const MSG_MP_POTION_LEVEL_LOCK_FAIL = "You must be at least level 16 to use this potion.";
const MAX_DAILY_MP_POTION_USAGE = 4;
const MSG_MP_POTION_DAILY_USAGE_EXCEEDED = "You can only use this potion four times each day.";

var cronCount = 0;

var XpUsageToday = 0;
var MaxDailyXpUsage = 0;

var MpUsageToday = 0;



// One-time, set up Experience Potion. It's separate in case someone only wants one potion.
function doExperienceSetup() {
  // First, create the potion as a custom reward
  https://habitica.com/api/v3/tasks/user
  {
    "text": XP_POTION_TEXT,
    "type": "reward",
    "alias": XP_POTION_ALIAS,
    "notes": "Gain 150 Experience (Instant Use)",
    "value": "25"
  }
  // Next, create the webhook
  const options = {
    "scored" : true,
  }
  const payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload); 
}

// One-time, set up Mana Potion. It's separate in case someone only wants one potion.
function doManaSetup() {
  https://habitica.com/api/v3/tasks/user
  {
    "text": MP_POTION_TEXT,
    "type": "reward",
    "alias": MP_POTION_ALIAS,
    "notes": "Recover 30 Mana (Instant Use)",
    "value": "25"
  }
  // Put the webhook setup here also
}

// Create a webhook if no duplicate exists
function apiMult_createNewWebhookNoDuplicates(payload) {
  const response = api_getWebhooks();
  const webhooks = JSON.parse(response).data;
  var duplicateExists = 0;
    
  for (var i in webhooks) {
    if (webhooks[i].label == payload.label) {
      duplicateExists = 1;
    }
  }
  // If webhook to be created doesn't exist yet
  if (!duplicateExists) {
    api_createNewWebhook(payload);
  }
}

// Used to see existing webhooks, and therefore if there's a duplicate
function api_getWebhooks() {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Creates a webhook (as part of the "don't make it if there's a duplicate" function)
function api_createNewWebhook(payload) {
  const params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
   
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Gets user info so I can use it, especially stats like mana, experience, and level
function api_getUserInfo(userFields) {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/user";
  if (userFields != "") {
    url += "?userFields=" + userFields;
  }

  const response = UrlFetchApp.fetch(url, params);
  user = JSON.parse(response).data;
  return response;
}

// Changes stats
function api_changeStats(hp, mp, exp, gp) {
  const payload = {
    "stats.hp" : hp,
    "stats.mp" : mp,
    "stats.exp" : exp,
    "stats.gp" : gp,
  }
  
  const params = {
    "method" : "put",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user";
  return UrlFetchApp.fetch(url, params);
}

// Send a notification as a private message, only if they're enabled
function api_sendPrivateMessage(message, toUserId) {
  switch (notificationsOn){ // Check if notifications are on, send message if yes
        case NOTIFICATIONS_ON = 0:
          break;        
        case NOTIFICATIONS_ON = 1:
            const payload = {
              "message" : message,
              "toUserId" : toUserId,
            }
            const params = {
              "method" : "post",
              "headers" : HEADERS,
              "contentType" : "application/json",
              "payload" : JSON.stringify(payload),
              "muteHttpExceptions" : true,
            }
            const url = "https://habitica.com/api/v3/members/send-private-message";
            return UrlFetchApp.fetch(url, params);
          break;
  }
}

// Resets all counters
function resetCounters() {
  XpUsageToday = 0;
  MpUsageToday = 0;
}


// Experience Potion use
function runXpPotion() {
  const response = api_getUserInfo("stats,flags.cronCount");
  var lvl = user.stats.lvl;
  var hp = user.stats.hp;
  var mp = user.stats.mp;
  var exp = user.stats.exp;
  var gp = user.stats.gp;
  
  // If they've Cronned, reset all counters
  if (cronCount != user.flags.cronCount) {
    cronCount = user.flags.cronCount;
    resetCounters();
  }
  
  // Calculate XP needed to level up, then usage maximum based on that
  XpToNextLevel = Math.round((Math.pow(user.stats.lvl, 2) * 0.25 + 10 * user.stats.lvl + 139.75) / 10) * 10;
  MaxDailyXpUsage = Math.floor(XpToNextLevel / 3);
  
  // Check for level lock
  switch (LevelLockXp) {
    // If it fails, send failure message if notifications are on, and refund the money
    case lvl < XP_POTION_LEVEL_LOCK:
      api_changeStats(hp, mp, exp, gp + 25); // Refund the money  
      api_sendPrivateMessage(MSG_XP_POTION_LEVEL_LOCK_FAIL, USER_ID);
      break;
    // If it passes, check if they've exceeded max XP gain today
    case lvl >= XP_POTION_LEVEL_LOCK:
      if (XpUsageToday + 150 > MaxDailyXpUsage) { // If maximum usage exceeded
        api_changeStats(hp, mp, exp, gp + 25); // Refund the money 
        api_sendPrivateMessage(MSG_XP_POTION_DAILY_USAGE_EXCEEDED, USER_ID); // Send failure message
      }
      else { // If it passes, run potion like normal and increment counter by 150
        api_changeStats(hp, mp, exp + 150, gp);
        XpUsageToday += 150;
      }
      break;
  }
}



// do things when the webhook runs
function doPost(e) {
  const dataContents = JSON.parse(e.postData.contents);
  const type = dataContents.type;
  const task = dataContents.task;
  
  // Check if a task was scored and if it was the XPpotion alias, do XP Potion
  if ((type == "scored") && (task.alias == XP_POTION_ALIAS)) {
    do runXpPotion();
  }
  // Check if a task was scored and if it was the MPpotion alias, do MP Potion
  else if ((type == "scored") && (task.alias == MP_POTION_ALIAS)) {
    do runMpPotion();
  }
  
  return HtmlService.createHtmlOutput();
}

 

// Mana Potion use
// BASICALLY THE SAME AS ABOVE (WAIT UNTIL IT'S DONE BEFORE I TRY MORE BELOW) but also the following additions:
  var int = user.stats.int;
  var maxMp = (2 * int) + 30;
  var mpDiff = maxMp - mp;
  
  //and more additions (nested case)
    // if level lock passes, cehck to see if near maximum Mana
      switch (nearMaxMp){
        // Adding +30 Mana won't put them at or beyond maximum
        case mpDiff <= 30:
          api_changeStats(hp, mp + 30, exp, gp);
          break;
        // Already at maximum Mana, so cause potion to fail
        case mpDiff = 0:
          api_changeStats(hp, mp, exp, gp + 25);
          api_sendPrivateMessage("You already have maximum Mana.", USER_ID);
          break;
        // Close to maximum Mana, so refill to max but not beyond
        case mpDiff > 30:
          api_changeStats(hp, mp + mpDiff, exp, gp);
          api_sendPrivateMessage("This potion filled you to maximum Mana, but not beyond the max.", USER_ID);
          break;
      }
